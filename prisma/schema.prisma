generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    // directUrl = env("DIRECT_URL")
}

model User {
    id           String   @id @default(cuid())
    username     String   @unique @db.VarChar(100)
    name         String
    email        String   @unique
    password     String?  @db.VarChar(150)
    access_token String?  @db.VarChar(255)
    image        String?
    provider     String
    created_at   DateTime @default(now())
    updated_at   DateTime @updatedAt

    @@map("users")
}

model Customer {
    id                  String             @id @default(cuid())
    name                String             @db.VarChar(50) // nama
    national_id         String             @unique @db.VarChar(30) // NIK
    id_card_address     String             @db.VarChar(100) // alamat KTP
    residential_address String             @db.VarChar(100) // alamat tinggal
    occupation          String             @db.VarChar(100) // pekerjaan
    phone               String             @db.VarChar(20) // nomor telepon
    created_at          DateTime           @default(now())
    updated_at          DateTime           @updatedAt
    guarantors          Guarantor[]
    loan_references     LoanReference[]
    credit_worthiness   Creditworthiness[]
    Transaction         Transaction[]

    @@map("customers")
}

model Guarantor {
    id                  String   @id @default(cuid())
    name                String   @db.VarChar(50) // nama
    national_id         String   @unique @db.VarChar(30) // NIK
    id_card_address     String   @db.VarChar(100) // alamat KTP
    residential_address String   @db.VarChar(100) // alamat tinggal
    occupation          String   @db.VarChar(100) // pekerjaan
    phone               String   @db.VarChar(20) // nomor telepon
    customer_id         String
    customer            Customer @relation(fields: [customer_id], references: [id], onDelete: Restrict)
    created_at          DateTime @default(now())
    updated_at          DateTime @updatedAt

    @@map("guarantors")
}

model LoanReference {
    id                      String   @id @default(cuid())
    monthly_income          String   @db.VarChar(100) // pendapatan bulanan
    monthly_expenses        String   @db.VarChar(100) // pengeluaran bulanan
    monthly_surplus         String   @db.VarChar(100)
    employment_status       Boolean // status pekerjaan tetap/tidak tetap
    previous_credit_history Boolean // riwayat kredit sebelumnya
    requested_loan_amount   String   @db.VarChar(100) // jumlah pinjaman yang diajukan
    collateral_estimate     String   @db.VarChar(100) // taksiran jaminan
    loan_term               Int // jangka waktu pinjaman (bulan)
    installment             String   @db.VarChar(100) // angsuran setiap bulan dengan bunga
    customer_id             String
    customer                Customer @relation(fields: [customer_id], references: [id], onDelete: Restrict)
    created_at              DateTime @default(now())
    updated_at              DateTime @updatedAt

    @@map("loan_references")
}

model Transaction {
    id          String   @id @default(cuid())
    installment String   @db.VarChar(100) // angsuran setiap bulan dengan bunga
    loan_term   Int // jangka waktu pinjaman (bulan)
    customer_id String
    customer    Customer @relation(fields: [customer_id], references: [id], onDelete: Restrict)

    @@map("transactions")
}

model Creditworthiness {
    id          String   @id @default(cuid())
    status      Boolean
    customer_id String
    customer    Customer @relation(fields: [customer_id], references: [id], onDelete: Restrict)

    @@map("credit_worthinesses")
}
